{"version":3,"sources":["sinag-logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","getTimeRemaining","endtime","t","Date","parse","seconds","Math","floor","minutes","hours","total","days","initializeClock","deadline","date","updateClock","setState","daysSpan","hoursSpan","slice","minutesSpan","secondsSpan","clearInterval","timeinterval","setInterval","componentDidMount","state","clock","className","src","Logo","alt","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,wC,+MC4F5BC,E,kDAvFd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAWPC,iBAAmB,SAACC,GACnB,IAAIC,EAAIC,KAAKC,MAAMH,GAAWE,KAAKC,MAAM,IAAID,MACzCE,EAAUC,KAAKC,MAAOL,EAAI,IAAQ,IAClCM,EAAUF,KAAKC,MAAOL,EAAI,IAAO,GAAM,IACvCO,EAAQH,KAAKC,MAAOL,EAAC,KAAuB,IAEhD,MAAO,CACNQ,MAAOR,EACPS,KAHUL,KAAKC,MAAML,EAAC,OAItBO,MAAOA,EACPD,QAASA,EACTH,QAASA,IAvBQ,EA2BnBO,gBAAkB,SAACC,GAClB,IAAMC,EAAO,IAAIX,KAAKA,KAAKC,MAAM,IAAID,OACrC,KAAIU,GAAYC,GAAhB,CAEA,IAAMC,EAAc,WACnB,IAAIb,EAAI,EAAKF,iBAAiBa,GAE9B,EAAKG,SAAS,CACbC,SAAUf,EAAES,KACZO,WAAY,IAAMhB,EAAEO,OAAOU,OAAO,GAClCC,aAAc,IAAMlB,EAAEM,SAASW,OAAO,GACtCE,aAAc,IAAMnB,EAAEG,SAASc,OAAO,KAGnCjB,EAAEQ,OAAS,GACdY,cAAcC,IAIhBR,IACA,IAAIQ,EAAeC,YAAYT,EAAa,OA/C1B,EAkDnBU,kBAAoB,WACnB,IAAIZ,EAAW,IAAIV,KAAKA,KAAKC,MAAM,IAAID,MAAU,QACjD,EAAKS,gBAAgBC,IAjDrB,EAAKa,MAAQ,CACZC,MAAO,EACPV,SAAU,EACVC,UAAW,EACXE,YAAa,EACbC,YAAa,GARI,E,qDAwDlB,OACC,6BACC,yBAAKO,UAAU,iBACd,yBAAKC,IAAKC,IAAMC,IAAI,gBAErB,yBAAKC,GAAG,YACP,6BACC,0BAAMJ,UAAU,QAAQK,KAAKP,MAAMT,UACnC,yBAAKW,UAAU,aAAf,SAED,6BACC,0BAAMA,UAAU,SAASK,KAAKP,MAAMR,WACpC,yBAAKU,UAAU,aAAf,UAED,6BACC,0BAAMA,UAAU,WAAWK,KAAKP,MAAMN,aACtC,yBAAKQ,UAAU,aAAf,YAED,6BACC,0BAAMA,UAAU,WAAWK,KAAKP,MAAML,aACtC,yBAAKO,UAAU,aAAf,aAGF,yBAAKA,UAAU,UACd,wD,GAjFaM,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64dbddf1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sinag-logo.9e4c42a0.png\";","import React, { Component } from 'react';\nimport './App.css';\nimport Logo from './sinag-logo.png';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tclock: 0,\n\t\t\tdaysSpan: 0,\n\t\t\thoursSpan: 0,\n\t\t\tminutesSpan: 0,\n\t\t\tsecondsSpan: 0,\n\t\t};\n\t}\n\n\tgetTimeRemaining = (endtime) => {\n\t\tvar t = Date.parse(endtime) - Date.parse(new Date());\n\t\tvar seconds = Math.floor((t / 1000) % 60);\n\t\tvar minutes = Math.floor((t / 1000 / 60) % 60);\n\t\tvar hours = Math.floor((t / (1000 * 60 * 60)) % 24);\n\t\tvar days = Math.floor(t / (1000 * 60 * 60 * 24));\n\t\treturn {\n\t\t\ttotal: t,\n\t\t\tdays: days,\n\t\t\thours: hours,\n\t\t\tminutes: minutes,\n\t\t\tseconds: seconds,\n\t\t};\n\t};\n\n\tinitializeClock = (deadline) => {\n\t\tconst date = new Date(Date.parse(new Date()));\n\t\tif (deadline <= date) return;\n\n\t\tconst updateClock = () => {\n\t\t\tvar t = this.getTimeRemaining(deadline);\n\n\t\t\tthis.setState({\n\t\t\t\tdaysSpan: t.days,\n\t\t\t\thoursSpan: ('0' + t.hours).slice(-2),\n\t\t\t\tminutesSpan: ('0' + t.minutes).slice(-2),\n\t\t\t\tsecondsSpan: ('0' + t.seconds).slice(-2),\n\t\t\t});\n\n\t\t\tif (t.total <= 0) {\n\t\t\t\tclearInterval(timeinterval);\n\t\t\t}\n\t\t};\n\n\t\tupdateClock();\n\t\tvar timeinterval = setInterval(updateClock, 1000);\n\t};\n\n\tcomponentDidMount = () => {\n\t\tvar deadline = new Date(Date.parse(new Date()) + 259200000);\n\t\tthis.initializeClock(deadline);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='img-container'>\n\t\t\t\t\t<img src={Logo} alt='sinag-logo' />\n\t\t\t\t</div>\n\t\t\t\t<div id='clockdiv'>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span className='days'>{this.state.daysSpan}</span>\n\t\t\t\t\t\t<div className='smalltext'>Days</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span className='hours'>{this.state.hoursSpan}</span>\n\t\t\t\t\t\t<div className='smalltext'>Hours</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span className='minutes'>{this.state.minutesSpan}</span>\n\t\t\t\t\t\t<div className='smalltext'>Minutes</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span className='seconds'>{this.state.secondsSpan}</span>\n\t\t\t\t\t\t<div className='smalltext'>Seconds</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='header'>\n\t\t\t\t\t<h1>The Sinag Project </h1>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}